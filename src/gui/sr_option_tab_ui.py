# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './sr_option_tab.ui'
#
# Created by: PyQt5 UI code generator 5.13.0
#
# WARNING! All changes made in this file will be lost!


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_SROptionTab(object):
    def setupUi(self, SROptionTab):
        SROptionTab.setObjectName("SROptionTab")
        SROptionTab.resize(799, 263)
        self.defaultSyntax = QtWidgets.QGroupBox(SROptionTab)
        self.defaultSyntax.setGeometry(QtCore.QRect(340, 10, 451, 241))
        self.defaultSyntax.setObjectName("defaultSyntax")
        self.cssColorsLabel = QtWidgets.QLabel(self.defaultSyntax)
        self.cssColorsLabel.setGeometry(QtCore.QRect(10, 30, 81, 16))
        self.cssColorsLabel.setObjectName("cssColorsLabel")
        self.cssColorsLineEdit = QtWidgets.QLineEdit(self.defaultSyntax)
        self.cssColorsLineEdit.setEnabled(True)
        self.cssColorsLineEdit.setGeometry(QtCore.QRect(110, 30, 331, 21))
        self.cssColorsLineEdit.setObjectName("cssColorsLineEdit")
        self.cssColorsCollectiveIndexingCheckBox = QtWidgets.QCheckBox(self.defaultSyntax)
        self.cssColorsCollectiveIndexingCheckBox.setGeometry(QtCore.QRect(240, 60, 181, 20))
        self.cssColorsCollectiveIndexingCheckBox.setTristate(False)
        self.cssColorsCollectiveIndexingCheckBox.setObjectName("cssColorsCollectiveIndexingCheckBox")
        self.cssColorsRandomStartIndexCheckBox = QtWidgets.QCheckBox(self.defaultSyntax)
        self.cssColorsRandomStartIndexCheckBox.setGeometry(QtCore.QRect(10, 60, 191, 20))
        self.cssColorsRandomStartIndexCheckBox.setObjectName("cssColorsRandomStartIndexCheckBox")
        self.dsOpenDelimLabel = QtWidgets.QLabel(self.defaultSyntax)
        self.dsOpenDelimLabel.setGeometry(QtCore.QRect(10, 150, 101, 21))
        self.dsOpenDelimLabel.setObjectName("dsOpenDelimLabel")
        self.dsOpenDelimLineEdit = QtWidgets.QLineEdit(self.defaultSyntax)
        self.dsOpenDelimLineEdit.setGeometry(QtCore.QRect(120, 150, 71, 21))
        self.dsOpenDelimLineEdit.setObjectName("dsOpenDelimLineEdit")
        self.dsCloseDelimLabel = QtWidgets.QLabel(self.defaultSyntax)
        self.dsCloseDelimLabel.setGeometry(QtCore.QRect(240, 150, 101, 21))
        self.dsCloseDelimLabel.setObjectName("dsCloseDelimLabel")
        self.dsCloseDelimLineEdit = QtWidgets.QLineEdit(self.defaultSyntax)
        self.dsCloseDelimLineEdit.setGeometry(QtCore.QRect(350, 150, 71, 21))
        self.dsCloseDelimLineEdit.setObjectName("dsCloseDelimLineEdit")
        self.fieldPaddingLabel = QtWidgets.QLabel(self.defaultSyntax)
        self.fieldPaddingLabel.setGeometry(QtCore.QRect(240, 180, 101, 21))
        self.fieldPaddingLabel.setObjectName("fieldPaddingLabel")
        self.fieldPaddingSpinBox = QtWidgets.QSpinBox(self.defaultSyntax)
        self.fieldPaddingSpinBox.setGeometry(QtCore.QRect(350, 180, 71, 21))
        self.fieldPaddingSpinBox.setObjectName("fieldPaddingSpinBox")
        self.dsFieldSeparatorLineEdit = QtWidgets.QLineEdit(self.defaultSyntax)
        self.dsFieldSeparatorLineEdit.setGeometry(QtCore.QRect(120, 180, 71, 21))
        self.dsFieldSeparatorLineEdit.setObjectName("dsFieldSeparatorLineEdit")
        self.dsFieldSeparatorLabel = QtWidgets.QLabel(self.defaultSyntax)
        self.dsFieldSeparatorLabel.setGeometry(QtCore.QRect(10, 180, 101, 21))
        self.dsFieldSeparatorLabel.setObjectName("dsFieldSeparatorLabel")
        self.emptySetLineEdit = QtWidgets.QLineEdit(self.defaultSyntax)
        self.emptySetLineEdit.setGeometry(QtCore.QRect(120, 210, 71, 21))
        self.emptySetLineEdit.setObjectName("emptySetLineEdit")
        self.emptySetLabel = QtWidgets.QLabel(self.defaultSyntax)
        self.emptySetLabel.setGeometry(QtCore.QRect(10, 210, 101, 21))
        self.emptySetLabel.setObjectName("emptySetLabel")
        self.htmlClassesRandomStartIndexCheckBox = QtWidgets.QCheckBox(self.defaultSyntax)
        self.htmlClassesRandomStartIndexCheckBox.setGeometry(QtCore.QRect(10, 120, 191, 20))
        self.htmlClassesRandomStartIndexCheckBox.setObjectName("htmlClassesRandomStartIndexCheckBox")
        self.htmlClassesCollectiveIndexingCheckBox = QtWidgets.QCheckBox(self.defaultSyntax)
        self.htmlClassesCollectiveIndexingCheckBox.setGeometry(QtCore.QRect(240, 120, 181, 20))
        self.htmlClassesCollectiveIndexingCheckBox.setTristate(False)
        self.htmlClassesCollectiveIndexingCheckBox.setObjectName("htmlClassesCollectiveIndexingCheckBox")
        self.htmlClassesLineEdit = QtWidgets.QLineEdit(self.defaultSyntax)
        self.htmlClassesLineEdit.setEnabled(True)
        self.htmlClassesLineEdit.setGeometry(QtCore.QRect(110, 90, 331, 21))
        self.htmlClassesLineEdit.setObjectName("htmlClassesLineEdit")
        self.htmlClassesLabel = QtWidgets.QLabel(self.defaultSyntax)
        self.htmlClassesLabel.setGeometry(QtCore.QRect(10, 90, 91, 16))
        self.htmlClassesLabel.setObjectName("htmlClassesLabel")
        self.inputSyntax = QtWidgets.QGroupBox(SROptionTab)
        self.inputSyntax.setGeometry(QtCore.QRect(10, 10, 311, 241))
        self.inputSyntax.setObjectName("inputSyntax")
        self.cssSelectorLabel = QtWidgets.QLabel(self.inputSyntax)
        self.cssSelectorLabel.setGeometry(QtCore.QRect(20, 30, 81, 16))
        self.cssSelectorLabel.setObjectName("cssSelectorLabel")
        self.cssSelectorLineEdit = QtWidgets.QLineEdit(self.inputSyntax)
        self.cssSelectorLineEdit.setGeometry(QtCore.QRect(110, 30, 191, 21))
        self.cssSelectorLineEdit.setObjectName("cssSelectorLineEdit")
        self.isRegexCheckBox = QtWidgets.QCheckBox(self.inputSyntax)
        self.isRegexCheckBox.setGeometry(QtCore.QRect(20, 60, 251, 20))
        self.isRegexCheckBox.setObjectName("isRegexCheckBox")
        self.isCloseDelimLabel = QtWidgets.QLabel(self.inputSyntax)
        self.isCloseDelimLabel.setGeometry(QtCore.QRect(20, 120, 101, 21))
        self.isCloseDelimLabel.setObjectName("isCloseDelimLabel")
        self.isCloseDelimLineEdit = QtWidgets.QLineEdit(self.inputSyntax)
        self.isCloseDelimLineEdit.setGeometry(QtCore.QRect(120, 120, 161, 21))
        self.isCloseDelimLineEdit.setObjectName("isCloseDelimLineEdit")
        self.isFieldSeparatorLineEdit = QtWidgets.QLineEdit(self.inputSyntax)
        self.isFieldSeparatorLineEdit.setGeometry(QtCore.QRect(120, 150, 161, 21))
        self.isFieldSeparatorLineEdit.setObjectName("isFieldSeparatorLineEdit")
        self.isOpenDelimLabel = QtWidgets.QLabel(self.inputSyntax)
        self.isOpenDelimLabel.setGeometry(QtCore.QRect(20, 90, 101, 21))
        self.isOpenDelimLabel.setObjectName("isOpenDelimLabel")
        self.isFieldSeparatorLabel = QtWidgets.QLabel(self.inputSyntax)
        self.isFieldSeparatorLabel.setGeometry(QtCore.QRect(20, 150, 101, 21))
        self.isFieldSeparatorLabel.setObjectName("isFieldSeparatorLabel")
        self.isOpenDelimLineEdit = QtWidgets.QLineEdit(self.inputSyntax)
        self.isOpenDelimLineEdit.setGeometry(QtCore.QRect(120, 90, 161, 21))
        self.isOpenDelimLineEdit.setObjectName("isOpenDelimLineEdit")

        self.retranslateUi(SROptionTab)
        QtCore.QMetaObject.connectSlotsByName(SROptionTab)

    def retranslateUi(self, SROptionTab):
        _translate = QtCore.QCoreApplication.translate
        SROptionTab.setWindowTitle(_translate("SROptionTab", "Form"))
        self.defaultSyntax.setToolTip(_translate("SROptionTab", "<html><head/><body><p>Every iteration has a default style with the name &quot;default&quot;. If no other style is applied, and no rule is applicable, the &quot;default&quot; style will be used.</p></body></html>"))
        self.defaultSyntax.setTitle(_translate("SROptionTab", "Default style"))
        self.cssColorsLabel.setToolTip(_translate("SROptionTab", "<html><head/><body><p>A list of CSS colors. The first field will be displayed with the first color. Colors will be repeated, if fields exceed colors. Shortcut: clrs.</p></body></html>"))
        self.cssColorsLabel.setText(_translate("SROptionTab", "CSS colors"))
        self.cssColorsLineEdit.setText(_translate("SROptionTab", "black, white, grey"))
        self.cssColorsCollectiveIndexingCheckBox.setToolTip(_translate("SROptionTab", "<html><head/><body><p>Normally, the choice of a color is reset for each new randomized set. With this option, all elements collectively will iterate through the colors. E.g. Two sets with one element each will both have color 1, with this option turned on, the second one will have color 2. Shortcut: clrci.</p></body></html>"))
        self.cssColorsCollectiveIndexingCheckBox.setText(_translate("SROptionTab", "Collective Color Indexing"))
        self.cssColorsRandomStartIndexCheckBox.setToolTip(_translate("SROptionTab", "<html><head/><body><p>Normally, the choice of a color always start with color 1. With this option turned on, the first color will be chosen at random, before normally iterating through the colors again. Shortcut: clrrsi.</p></body></html>"))
        self.cssColorsRandomStartIndexCheckBox.setText(_translate("SROptionTab", "Random Start Color Index"))
        self.dsOpenDelimLabel.setToolTip(_translate("SROptionTab", "<html><head/><body><p>The opening delimiter of the randomized sets after processing. Shortcut: od.</p></body></html>"))
        self.dsOpenDelimLabel.setText(_translate("SROptionTab", "Open delimiter"))
        self.dsOpenDelimLineEdit.setText(_translate("SROptionTab", "((("))
        self.dsCloseDelimLabel.setToolTip(_translate("SROptionTab", "<html><head/><body><p>The closing delimiter of the randomized sets after processing. Shortcut: cd.</p></body></html>"))
        self.dsCloseDelimLabel.setText(_translate("SROptionTab", "Close delimiter"))
        self.dsCloseDelimLineEdit.setText(_translate("SROptionTab", ")))"))
        self.fieldPaddingLabel.setToolTip(_translate("SROptionTab", "<html><head/><body><p>The field padding of the randomized sets after processing. Shortcut: fp.</p></body></html>"))
        self.fieldPaddingLabel.setText(_translate("SROptionTab", "Field padding"))
        self.fieldPaddingSpinBox.setSuffix(_translate("SROptionTab", "px"))
        self.dsFieldSeparatorLineEdit.setText(_translate("SROptionTab", "%%%"))
        self.dsFieldSeparatorLabel.setText(_translate("SROptionTab", "Field separator"))
        self.emptySetLineEdit.setText(_translate("SROptionTab", "---"))
        self.emptySetLabel.setText(_translate("SROptionTab", "Empty set"))
        self.htmlClassesRandomStartIndexCheckBox.setToolTip(_translate("SROptionTab", "<html><head/><body><p>Normally, the choice of a class always start with class 1. With this option turned on, the first class will be chosen at random, before normally iterating through the classes again. Shortcut: clsrsi.</p></body></html>"))
        self.htmlClassesRandomStartIndexCheckBox.setText(_translate("SROptionTab", "Random Start Class Index"))
        self.htmlClassesCollectiveIndexingCheckBox.setToolTip(_translate("SROptionTab", "<html><head/><body><p>Normally, the choice of a class is reset for each new randomized set. With this option, all elements collectively will iterate through the classes. E.g. Two sets with one element each will both have class 1, with this option turned on, the second one will have class 2. Shortcut: clsci.</p></body></html>"))
        self.htmlClassesCollectiveIndexingCheckBox.setText(_translate("SROptionTab", "Collective Class Indexing"))
        self.htmlClassesLineEdit.setText(_translate("SROptionTab", "class1, class2, class3"))
        self.htmlClassesLabel.setToolTip(_translate("SROptionTab", "<html><head/><body><p>A list of HTML classes. The first field will be displayed with the first class. Classes will be repeated, if fields exceed classes. Shortcut: clss.</p></body></html>"))
        self.htmlClassesLabel.setText(_translate("SROptionTab", "HTML classes"))
        self.inputSyntax.setToolTip(_translate("SROptionTab", "<html><head/><body><p>The input syntax of the iteration. This will be used to detect sets in the card content.</p></body></html>"))
        self.inputSyntax.setTitle(_translate("SROptionTab", "Input syntax"))
        self.cssSelectorLabel.setToolTip(_translate("SROptionTab", "<html><head/><body><p>A CSS query to select the elements which contain all sets. This can contain queries for classes, or multiple separated by commas. </p></body></html>"))
        self.cssSelectorLabel.setText(_translate("SROptionTab", "CSS selector"))
        self.cssSelectorLineEdit.setText(_translate("SROptionTab", "asfd"))
        self.isRegexCheckBox.setToolTip(_translate("SROptionTab", "<html><head/><body><p>Advanced feature. Check this if you want to treat the content of the &quot;Open Delimiter&quot;, &quot;Close Delimiter&quot;, and &quot;Field separator&quot; as regular expressions.</p></body></html>"))
        self.isRegexCheckBox.setText(_translate("SROptionTab", "Input syntax are regular expressions"))
        self.isCloseDelimLabel.setToolTip(_translate("SROptionTab", "<html><head/><body><p>The closing delimiter of the randomized sets before processing.</p></body></html>"))
        self.isCloseDelimLabel.setText(_translate("SROptionTab", "Close delimiter"))
        self.isCloseDelimLineEdit.setText(_translate("SROptionTab", ")))"))
        self.isFieldSeparatorLineEdit.setText(_translate("SROptionTab", "%%%"))
        self.isOpenDelimLabel.setToolTip(_translate("SROptionTab", "<html><head/><body><p>The opening delimiter of the randomized sets before processing.</p></body></html>"))
        self.isOpenDelimLabel.setText(_translate("SROptionTab", "Open delimiter"))
        self.isFieldSeparatorLabel.setToolTip(_translate("SROptionTab", "<html><head/><body><p>The field separator of the randomized sets before processing.</p></body></html>"))
        self.isFieldSeparatorLabel.setText(_translate("SROptionTab", "Field separator"))
        self.isOpenDelimLineEdit.setText(_translate("SROptionTab", "((("))
