# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './sr_injection_config.ui'
#
# Created by: PyQt5 UI code generator 5.13.0
#
# WARNING! All changes made in this file will be lost!


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_SRInjectionConfig(object):
    def setupUi(self, SRInjectionConfig):
        SRInjectionConfig.setObjectName("SRInjectionConfig")
        SRInjectionConfig.resize(728, 408)
        self.gridLayout_2 = QtWidgets.QGridLayout(SRInjectionConfig)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.saveButton = QtWidgets.QPushButton(SRInjectionConfig)
        self.saveButton.setAutoDefault(True)
        self.saveButton.setObjectName("saveButton")
        self.gridLayout_2.addWidget(self.saveButton, 2, 6, 1, 1)
        self.statementsForInsertion = QtWidgets.QGroupBox(SRInjectionConfig)
        self.statementsForInsertion.setObjectName("statementsForInsertion")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.statementsForInsertion)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.addButton = QtWidgets.QPushButton(self.statementsForInsertion)
        self.addButton.setObjectName("addButton")
        self.gridLayout_4.addWidget(self.addButton, 1, 1, 1, 1)
        self.deleteButton = QtWidgets.QPushButton(self.statementsForInsertion)
        self.deleteButton.setObjectName("deleteButton")
        self.gridLayout_4.addWidget(self.deleteButton, 1, 2, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem, 1, 0, 1, 1)
        self.statementsList = QtWidgets.QListWidget(self.statementsForInsertion)
        self.statementsList.setDragEnabled(True)
        self.statementsList.setDragDropMode(QtWidgets.QAbstractItemView.InternalMove)
        self.statementsList.setAlternatingRowColors(True)
        self.statementsList.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.statementsList.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectItems)
        self.statementsList.setProperty("isWrapping", True)
        self.statementsList.setResizeMode(QtWidgets.QListView.Fixed)
        self.statementsList.setSelectionRectVisible(True)
        self.statementsList.setObjectName("statementsList")
        item = QtWidgets.QListWidgetItem()
        self.statementsList.addItem(item)
        item = QtWidgets.QListWidgetItem()
        item.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEditable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled)
        self.statementsList.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.statementsList.addItem(item)
        self.gridLayout_4.addWidget(self.statementsList, 0, 0, 1, 3)
        self.gridLayout_2.addWidget(self.statementsForInsertion, 0, 3, 2, 4)
        self.cancelButton = QtWidgets.QPushButton(SRInjectionConfig)
        self.cancelButton.setObjectName("cancelButton")
        self.gridLayout_2.addWidget(self.cancelButton, 2, 5, 1, 1)
        self.generalOptions = QtWidgets.QGroupBox(SRInjectionConfig)
        self.generalOptions.setObjectName("generalOptions")
        self.gridLayout = QtWidgets.QGridLayout(self.generalOptions)
        self.gridLayout.setObjectName("gridLayout")
        self.nameLabel = QtWidgets.QLabel(self.generalOptions)
        self.nameLabel.setObjectName("nameLabel")
        self.gridLayout.addWidget(self.nameLabel, 1, 0, 1, 1)
        self.enableInjectionCheckBox = QtWidgets.QCheckBox(self.generalOptions)
        self.enableInjectionCheckBox.setObjectName("enableInjectionCheckBox")
        self.gridLayout.addWidget(self.enableInjectionCheckBox, 3, 0, 1, 2)
        self.nameLineEdit = QtWidgets.QLineEdit(self.generalOptions)
        self.nameLineEdit.setObjectName("nameLineEdit")
        self.gridLayout.addWidget(self.nameLineEdit, 1, 1, 1, 1)
        self.descriptionTextEdit = QtWidgets.QPlainTextEdit(self.generalOptions)
        self.descriptionTextEdit.setObjectName("descriptionTextEdit")
        self.gridLayout.addWidget(self.descriptionTextEdit, 2, 0, 1, 2)
        self.gridLayout_2.addWidget(self.generalOptions, 0, 0, 1, 3)
        self.injectionConditions = QtWidgets.QGroupBox(SRInjectionConfig)
        self.injectionConditions.setObjectName("injectionConditions")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.injectionConditions)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.validateButton = QtWidgets.QPushButton(self.injectionConditions)
        self.validateButton.setObjectName("validateButton")
        self.gridLayout_3.addWidget(self.validateButton, 1, 1, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem1, 1, 2, 1, 1)
        self.conditionsTextEdit = QtWidgets.QPlainTextEdit(self.injectionConditions)
        self.conditionsTextEdit.setObjectName("conditionsTextEdit")
        self.gridLayout_3.addWidget(self.conditionsTextEdit, 0, 1, 1, 2)
        self.gridLayout_2.addWidget(self.injectionConditions, 1, 0, 1, 3)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem2, 2, 1, 1, 4)
        self.pushButton = QtWidgets.QPushButton(SRInjectionConfig)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout_2.addWidget(self.pushButton, 2, 0, 1, 1)

        self.retranslateUi(SRInjectionConfig)
        QtCore.QMetaObject.connectSlotsByName(SRInjectionConfig)

    def retranslateUi(self, SRInjectionConfig):
        _translate = QtCore.QCoreApplication.translate
        SRInjectionConfig.setWindowTitle(_translate("SRInjectionConfig", "Form"))
        self.saveButton.setText(_translate("SRInjectionConfig", "Save"))
        self.statementsForInsertion.setToolTip(_translate("SRInjectionConfig", "<html><head/><body><p>Every iteration has a default style with the name &quot;default&quot;. If no other style is applied, and no rule is applicable, the &quot;default&quot; style will be used.</p></body></html>"))
        self.statementsForInsertion.setTitle(_translate("SRInjectionConfig", "Statements To Inject"))
        self.addButton.setText(_translate("SRInjectionConfig", " ⊕ Add"))
        self.deleteButton.setText(_translate("SRInjectionConfig", "⌫ Delete"))
        self.statementsList.setSortingEnabled(False)
        __sortingEnabled = self.statementsList.isSortingEnabled()
        self.statementsList.setSortingEnabled(False)
        item = self.statementsList.item(0)
        item.setText(_translate("SRInjectionConfig", "$eval(tone)"))
        item = self.statementsList.item(1)
        item.setText(_translate("SRInjectionConfig", "$rule(tone, tone)"))
        item = self.statementsList.item(2)
        item.setText(_translate("SRInjectionConfig", "$style(tone, clrs:[pink], fltr:yes)"))
        self.statementsList.setSortingEnabled(__sortingEnabled)
        self.cancelButton.setText(_translate("SRInjectionConfig", "Cancel"))
        self.generalOptions.setToolTip(_translate("SRInjectionConfig", "<html><head/><body><p>The input syntax of the iteration. This will be used to detect sets in the card content.</p></body></html>"))
        self.generalOptions.setTitle(_translate("SRInjectionConfig", "General"))
        self.nameLabel.setText(_translate("SRInjectionConfig", "Name"))
        self.enableInjectionCheckBox.setToolTip(_translate("SRInjectionConfig", "<html><head/><body><p>Advanced feature. Check this if you want to treat the content of the &quot;Open Delimiter&quot;, &quot;Close Delimiter&quot;, and &quot;Field separator&quot; as regular expressions.</p></body></html>"))
        self.enableInjectionCheckBox.setText(_translate("SRInjectionConfig", "Enable injection"))
        self.nameLineEdit.setText(_translate("SRInjectionConfig", "meh name"))
        self.descriptionTextEdit.setPlaceholderText(_translate("SRInjectionConfig", "Description"))
        self.injectionConditions.setToolTip(_translate("SRInjectionConfig", "<html><head/><body><p>The input syntax of the iteration. This will be used to detect sets in the card content.</p></body></html>"))
        self.injectionConditions.setTitle(_translate("SRInjectionConfig", "Injection Conditions"))
        self.validateButton.setText(_translate("SRInjectionConfig", "Validate Conditions"))
        self.conditionsTextEdit.setPlainText(_translate("SRInjectionConfig", "[\'&\',\n"
" [\'card\', \'includes\', \'FrontBack\'],\n"
" [\'|\', [\'tag\', \'endsWith\', \'context\'], [\'tag\', \'endsWith\', \'xxx\']]]"))
        self.pushButton.setText(_translate("SRInjectionConfig", "Import / Export"))
