# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './sr_iteration_config.ui'
#
# Created by: PyQt5 UI code generator 5.13.0
#
# WARNING! All changes made in this file will be lost!


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_SRIterationConfig(object):
    def setupUi(self, SRIterationConfig):
        SRIterationConfig.setObjectName("SRIterationConfig")
        SRIterationConfig.resize(1038, 475)
        self.gridLayout_3 = QtWidgets.QGridLayout(SRIterationConfig)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.inputSyntax = QtWidgets.QGroupBox(SRIterationConfig)
        self.inputSyntax.setObjectName("inputSyntax")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.inputSyntax)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.cssSelectorLabel = QtWidgets.QLabel(self.inputSyntax)
        self.cssSelectorLabel.setObjectName("cssSelectorLabel")
        self.gridLayout_2.addWidget(self.cssSelectorLabel, 0, 0, 1, 1)
        self.cssSelectorLineEdit = QtWidgets.QLineEdit(self.inputSyntax)
        self.cssSelectorLineEdit.setObjectName("cssSelectorLineEdit")
        self.gridLayout_2.addWidget(self.cssSelectorLineEdit, 0, 1, 1, 1)
        self.isRegexCheckBox = QtWidgets.QCheckBox(self.inputSyntax)
        self.isRegexCheckBox.setObjectName("isRegexCheckBox")
        self.gridLayout_2.addWidget(self.isRegexCheckBox, 1, 0, 1, 2)
        self.isOpenDelimLabel = QtWidgets.QLabel(self.inputSyntax)
        self.isOpenDelimLabel.setObjectName("isOpenDelimLabel")
        self.gridLayout_2.addWidget(self.isOpenDelimLabel, 2, 0, 1, 1)
        self.isOpenDelimLineEdit = QtWidgets.QLineEdit(self.inputSyntax)
        self.isOpenDelimLineEdit.setObjectName("isOpenDelimLineEdit")
        self.gridLayout_2.addWidget(self.isOpenDelimLineEdit, 2, 1, 1, 1)
        self.isCloseDelimLabel = QtWidgets.QLabel(self.inputSyntax)
        self.isCloseDelimLabel.setObjectName("isCloseDelimLabel")
        self.gridLayout_2.addWidget(self.isCloseDelimLabel, 3, 0, 1, 1)
        self.isCloseDelimLineEdit = QtWidgets.QLineEdit(self.inputSyntax)
        self.isCloseDelimLineEdit.setObjectName("isCloseDelimLineEdit")
        self.gridLayout_2.addWidget(self.isCloseDelimLineEdit, 3, 1, 1, 1)
        self.isFieldSeparatorLabel = QtWidgets.QLabel(self.inputSyntax)
        self.isFieldSeparatorLabel.setObjectName("isFieldSeparatorLabel")
        self.gridLayout_2.addWidget(self.isFieldSeparatorLabel, 4, 0, 1, 1)
        self.isFieldSeparatorLineEdit = QtWidgets.QLineEdit(self.inputSyntax)
        self.isFieldSeparatorLineEdit.setObjectName("isFieldSeparatorLineEdit")
        self.gridLayout_2.addWidget(self.isFieldSeparatorLineEdit, 4, 1, 1, 1)
        self.gridLayout_3.addWidget(self.inputSyntax, 1, 0, 1, 1)
        self.setsDefaultStyle = QtWidgets.QGroupBox(SRIterationConfig)
        self.setsDefaultStyle.setObjectName("setsDefaultStyle")
        self.gridLayout = QtWidgets.QGridLayout(self.setsDefaultStyle)
        self.gridLayout.setObjectName("gridLayout")
        self.cssColorsCollectiveIndexingCheckBox = QtWidgets.QCheckBox(self.setsDefaultStyle)
        self.cssColorsCollectiveIndexingCheckBox.setTristate(False)
        self.cssColorsCollectiveIndexingCheckBox.setObjectName("cssColorsCollectiveIndexingCheckBox")
        self.gridLayout.addWidget(self.cssColorsCollectiveIndexingCheckBox, 1, 3, 1, 1)
        self.cssColorsLabel = QtWidgets.QLabel(self.setsDefaultStyle)
        self.cssColorsLabel.setObjectName("cssColorsLabel")
        self.gridLayout.addWidget(self.cssColorsLabel, 0, 0, 1, 1)
        self.dsCloseDelimLineEdit = QtWidgets.QLineEdit(self.setsDefaultStyle)
        self.dsCloseDelimLineEdit.setObjectName("dsCloseDelimLineEdit")
        self.gridLayout.addWidget(self.dsCloseDelimLineEdit, 10, 1, 1, 1)
        self.htmlClassesLabel = QtWidgets.QLabel(self.setsDefaultStyle)
        self.htmlClassesLabel.setObjectName("htmlClassesLabel")
        self.gridLayout.addWidget(self.htmlClassesLabel, 4, 0, 1, 1)
        self.dsOpenDelimLineEdit = QtWidgets.QLineEdit(self.setsDefaultStyle)
        self.dsOpenDelimLineEdit.setObjectName("dsOpenDelimLineEdit")
        self.gridLayout.addWidget(self.dsOpenDelimLineEdit, 8, 1, 1, 1)
        self.htmlClassesDelimLabel = QtWidgets.QLabel(self.setsDefaultStyle)
        self.htmlClassesDelimLabel.setObjectName("htmlClassesDelimLabel")
        self.gridLayout.addWidget(self.htmlClassesDelimLabel, 5, 0, 1, 1)
        self.dsOpenDelimLabel = QtWidgets.QLabel(self.setsDefaultStyle)
        self.dsOpenDelimLabel.setObjectName("dsOpenDelimLabel")
        self.gridLayout.addWidget(self.dsOpenDelimLabel, 8, 0, 1, 1)
        self.dsFieldSeparatorLabel = QtWidgets.QLabel(self.setsDefaultStyle)
        self.dsFieldSeparatorLabel.setObjectName("dsFieldSeparatorLabel")
        self.gridLayout.addWidget(self.dsFieldSeparatorLabel, 8, 2, 1, 1)
        self.fieldPaddingSpinBox = QtWidgets.QSpinBox(self.setsDefaultStyle)
        self.fieldPaddingSpinBox.setObjectName("fieldPaddingSpinBox")
        self.gridLayout.addWidget(self.fieldPaddingSpinBox, 10, 3, 1, 1)
        self.emptySetLabel = QtWidgets.QLabel(self.setsDefaultStyle)
        self.emptySetLabel.setObjectName("emptySetLabel")
        self.gridLayout.addWidget(self.emptySetLabel, 11, 0, 1, 1)
        self.hruler2 = QtWidgets.QFrame(self.setsDefaultStyle)
        self.hruler2.setFrameShape(QtWidgets.QFrame.HLine)
        self.hruler2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.hruler2.setObjectName("hruler2")
        self.gridLayout.addWidget(self.hruler2, 7, 0, 1, 4)
        self.dsCloseDelimLabel = QtWidgets.QLabel(self.setsDefaultStyle)
        self.dsCloseDelimLabel.setObjectName("dsCloseDelimLabel")
        self.gridLayout.addWidget(self.dsCloseDelimLabel, 10, 0, 1, 1)
        self.htmlClassesLineEdit = QtWidgets.QLineEdit(self.setsDefaultStyle)
        self.htmlClassesLineEdit.setEnabled(True)
        self.htmlClassesLineEdit.setObjectName("htmlClassesLineEdit")
        self.gridLayout.addWidget(self.htmlClassesLineEdit, 4, 1, 1, 3)
        self.htmlClassesCollectiveIndexingCheckBox = QtWidgets.QCheckBox(self.setsDefaultStyle)
        self.htmlClassesCollectiveIndexingCheckBox.setTristate(False)
        self.htmlClassesCollectiveIndexingCheckBox.setObjectName("htmlClassesCollectiveIndexingCheckBox")
        self.gridLayout.addWidget(self.htmlClassesCollectiveIndexingCheckBox, 5, 3, 1, 1)
        self.fieldPaddingLabel = QtWidgets.QLabel(self.setsDefaultStyle)
        self.fieldPaddingLabel.setObjectName("fieldPaddingLabel")
        self.gridLayout.addWidget(self.fieldPaddingLabel, 10, 2, 1, 1)
        self.htmlClassesRandomStartIndexCheckBox = QtWidgets.QCheckBox(self.setsDefaultStyle)
        self.htmlClassesRandomStartIndexCheckBox.setObjectName("htmlClassesRandomStartIndexCheckBox")
        self.gridLayout.addWidget(self.htmlClassesRandomStartIndexCheckBox, 5, 2, 1, 1)
        self.cssColorsLineEdit = QtWidgets.QLineEdit(self.setsDefaultStyle)
        self.cssColorsLineEdit.setEnabled(True)
        self.cssColorsLineEdit.setObjectName("cssColorsLineEdit")
        self.gridLayout.addWidget(self.cssColorsLineEdit, 0, 1, 1, 3)
        self.cssColorsRandomStartIndexCheckBox = QtWidgets.QCheckBox(self.setsDefaultStyle)
        self.cssColorsRandomStartIndexCheckBox.setObjectName("cssColorsRandomStartIndexCheckBox")
        self.gridLayout.addWidget(self.cssColorsRandomStartIndexCheckBox, 1, 2, 1, 1)
        self.emptySetLineEdit = QtWidgets.QLineEdit(self.setsDefaultStyle)
        self.emptySetLineEdit.setObjectName("emptySetLineEdit")
        self.gridLayout.addWidget(self.emptySetLineEdit, 11, 1, 1, 1)
        self.dsFieldSeparatorLineEdit = QtWidgets.QLineEdit(self.setsDefaultStyle)
        self.dsFieldSeparatorLineEdit.setObjectName("dsFieldSeparatorLineEdit")
        self.gridLayout.addWidget(self.dsFieldSeparatorLineEdit, 8, 3, 1, 1)
        self.hruler1 = QtWidgets.QFrame(self.setsDefaultStyle)
        self.hruler1.setFrameShape(QtWidgets.QFrame.HLine)
        self.hruler1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.hruler1.setObjectName("hruler1")
        self.gridLayout.addWidget(self.hruler1, 3, 0, 1, 4)
        self.cssColorsDelimLabel = QtWidgets.QLabel(self.setsDefaultStyle)
        self.cssColorsDelimLabel.setObjectName("cssColorsDelimLabel")
        self.gridLayout.addWidget(self.cssColorsDelimLabel, 1, 0, 1, 1)
        self.cssColorsDelimLineEdit = QtWidgets.QLineEdit(self.setsDefaultStyle)
        self.cssColorsDelimLineEdit.setObjectName("cssColorsDelimLineEdit")
        self.gridLayout.addWidget(self.cssColorsDelimLineEdit, 1, 1, 1, 1)
        self.htmlClassesDelimLineEdit = QtWidgets.QLineEdit(self.setsDefaultStyle)
        self.htmlClassesDelimLineEdit.setObjectName("htmlClassesDelimLineEdit")
        self.gridLayout.addWidget(self.htmlClassesDelimLineEdit, 5, 1, 1, 1)
        self.gridLayout_3.addWidget(self.setsDefaultStyle, 0, 1, 3, 1)
        self.generalOptions = QtWidgets.QGroupBox(SRIterationConfig)
        self.generalOptions.setObjectName("generalOptions")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.generalOptions)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.enableIterationCheckBox = QtWidgets.QCheckBox(self.generalOptions)
        self.enableIterationCheckBox.setObjectName("enableIterationCheckBox")
        self.verticalLayout_8.addWidget(self.enableIterationCheckBox)
        self.descriptionTextEdit = QtWidgets.QPlainTextEdit(self.generalOptions)
        self.descriptionTextEdit.setPlainText("")
        self.descriptionTextEdit.setObjectName("descriptionTextEdit")
        self.verticalLayout_8.addWidget(self.descriptionTextEdit)
        self.gridLayout_3.addWidget(self.generalOptions, 0, 0, 1, 1)
        self.yanksDefaultStyle = QtWidgets.QGroupBox(SRIterationConfig)
        self.yanksDefaultStyle.setObjectName("yanksDefaultStyle")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.yanksDefaultStyle)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.strokeLabel = QtWidgets.QLabel(self.yanksDefaultStyle)
        self.strokeLabel.setObjectName("strokeLabel")
        self.gridLayout_4.addWidget(self.strokeLabel, 0, 0, 1, 1)
        self.strokeWidthLabel = QtWidgets.QLabel(self.yanksDefaultStyle)
        self.strokeWidthLabel.setObjectName("strokeWidthLabel")
        self.gridLayout_4.addWidget(self.strokeWidthLabel, 2, 0, 1, 1)
        self.fillLineEdit = QtWidgets.QLineEdit(self.yanksDefaultStyle)
        self.fillLineEdit.setObjectName("fillLineEdit")
        self.gridLayout_4.addWidget(self.fillLineEdit, 0, 3, 1, 1)
        self.fillOpacityLabel = QtWidgets.QLabel(self.yanksDefaultStyle)
        self.fillOpacityLabel.setObjectName("fillOpacityLabel")
        self.gridLayout_4.addWidget(self.fillOpacityLabel, 1, 2, 1, 1)
        self.fillLabel = QtWidgets.QLabel(self.yanksDefaultStyle)
        self.fillLabel.setObjectName("fillLabel")
        self.gridLayout_4.addWidget(self.fillLabel, 0, 2, 1, 1)
        self.strokeLineEdit = QtWidgets.QLineEdit(self.yanksDefaultStyle)
        self.strokeLineEdit.setObjectName("strokeLineEdit")
        self.gridLayout_4.addWidget(self.strokeLineEdit, 0, 1, 1, 1)
        self.strokeOpacityLabel = QtWidgets.QLabel(self.yanksDefaultStyle)
        self.strokeOpacityLabel.setObjectName("strokeOpacityLabel")
        self.gridLayout_4.addWidget(self.strokeOpacityLabel, 1, 0, 1, 1)
        self.strokeWidthSpinBox = QtWidgets.QSpinBox(self.yanksDefaultStyle)
        self.strokeWidthSpinBox.setObjectName("strokeWidthSpinBox")
        self.gridLayout_4.addWidget(self.strokeWidthSpinBox, 2, 1, 1, 1)
        self.fillOpacitySpinBox = QtWidgets.QDoubleSpinBox(self.yanksDefaultStyle)
        self.fillOpacitySpinBox.setMaximum(1.0)
        self.fillOpacitySpinBox.setSingleStep(0.1)
        self.fillOpacitySpinBox.setObjectName("fillOpacitySpinBox")
        self.gridLayout_4.addWidget(self.fillOpacitySpinBox, 1, 3, 1, 1)
        self.strokeOpacitySpinBox = QtWidgets.QDoubleSpinBox(self.yanksDefaultStyle)
        self.strokeOpacitySpinBox.setMaximum(1.0)
        self.strokeOpacitySpinBox.setSingleStep(0.1)
        self.strokeOpacitySpinBox.setObjectName("strokeOpacitySpinBox")
        self.gridLayout_4.addWidget(self.strokeOpacitySpinBox, 1, 1, 1, 1)
        self.gridLayout_3.addWidget(self.yanksDefaultStyle, 2, 0, 1, 1)

        self.retranslateUi(SRIterationConfig)
        QtCore.QMetaObject.connectSlotsByName(SRIterationConfig)

    def retranslateUi(self, SRIterationConfig):
        _translate = QtCore.QCoreApplication.translate
        SRIterationConfig.setWindowTitle(_translate("SRIterationConfig", "Form"))
        self.inputSyntax.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>The input syntax of the iteration. This will be used to detect sets in the card content.</p></body></html>"))
        self.inputSyntax.setTitle(_translate("SRIterationConfig", "Input Syntax"))
        self.cssSelectorLabel.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>A CSS query to select the elements which contain all sets. This can contain queries for classes, or multiple separated by commas. </p></body></html>"))
        self.cssSelectorLabel.setText(_translate("SRIterationConfig", "CSS selector"))
        self.cssSelectorLineEdit.setText(_translate("SRIterationConfig", "asfd"))
        self.isRegexCheckBox.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>Advanced feature. Check this if you want to treat the content of the &quot;Open Delimiter&quot;, &quot;Close Delimiter&quot;, and &quot;Field separator&quot; as regular expressions.</p></body></html>"))
        self.isRegexCheckBox.setText(_translate("SRIterationConfig", "Input syntax contains regular expressions"))
        self.isOpenDelimLabel.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>The opening delimiter of the randomized sets before processing.</p></body></html>"))
        self.isOpenDelimLabel.setText(_translate("SRIterationConfig", "Open delimiter"))
        self.isOpenDelimLineEdit.setText(_translate("SRIterationConfig", "((("))
        self.isCloseDelimLabel.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>The closing delimiter of the randomized sets before processing.</p></body></html>"))
        self.isCloseDelimLabel.setText(_translate("SRIterationConfig", "Close delimiter"))
        self.isCloseDelimLineEdit.setText(_translate("SRIterationConfig", ")))"))
        self.isFieldSeparatorLabel.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>The field separator of the randomized sets before processing.</p></body></html>"))
        self.isFieldSeparatorLabel.setText(_translate("SRIterationConfig", "Field separator"))
        self.isFieldSeparatorLineEdit.setText(_translate("SRIterationConfig", "%%%"))
        self.setsDefaultStyle.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>Every iteration has a default style with the name &quot;default&quot;. If no other style is applied, and no rule is applicable, the &quot;default&quot; style will be used.</p></body></html>"))
        self.setsDefaultStyle.setTitle(_translate("SRIterationConfig", "Default Style: Sets"))
        self.cssColorsCollectiveIndexingCheckBox.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>(colorCi) Normally, the choice of a color is reset for each new randomized set. With this option, all elements collectively will iterate through the colors. E.g. Two sets with one element each will both have color 1, with this option turned on, the second one will have color 2.</p></body></html>"))
        self.cssColorsCollectiveIndexingCheckBox.setText(_translate("SRIterationConfig", "Collective Indexing"))
        self.cssColorsLabel.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>(colors) A list of CSS colors. The first field will be displayed with the first color. Colors will be repeated, if fields exceed colors.</p></body></html>"))
        self.cssColorsLabel.setText(_translate("SRIterationConfig", "CSS colors"))
        self.dsCloseDelimLineEdit.setText(_translate("SRIterationConfig", ")))"))
        self.htmlClassesLabel.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>(classes) A list of HTML classes. The first field will be displayed with the first class. Classes will be repeated, if fields exceed classes.</p></body></html>"))
        self.htmlClassesLabel.setText(_translate("SRIterationConfig", "HTML classes"))
        self.dsOpenDelimLineEdit.setText(_translate("SRIterationConfig", "((("))
        self.htmlClassesDelimLabel.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>(classDelim) An html class that effect all elements in the set.</p></body></html>"))
        self.htmlClassesDelimLabel.setText(_translate("SRIterationConfig", "Delimiter class"))
        self.dsOpenDelimLabel.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>(openDelim) The opening delimiter of the randomized sets after processing.</p></body></html>"))
        self.dsOpenDelimLabel.setText(_translate("SRIterationConfig", "Open delimiter"))
        self.dsFieldSeparatorLabel.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>(fieldSeparator) A character sequence that is used to separate the elements of sets.</p></body></html>"))
        self.dsFieldSeparatorLabel.setText(_translate("SRIterationConfig", "Field separator"))
        self.fieldPaddingSpinBox.setSuffix(_translate("SRIterationConfig", "px"))
        self.emptySetLabel.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>(emptySet) A character sequence that is used to fill in empty sets.</p></body></html>"))
        self.emptySetLabel.setText(_translate("SRIterationConfig", "Empty set"))
        self.dsCloseDelimLabel.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>(closeDelim) The closing delimiter of the randomized sets after processing.</p></body></html>"))
        self.dsCloseDelimLabel.setText(_translate("SRIterationConfig", "Close delimiter"))
        self.htmlClassesLineEdit.setText(_translate("SRIterationConfig", "class1, class2, class3"))
        self.htmlClassesCollectiveIndexingCheckBox.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>(classCi) Normally, the choice of a class is reset for each new randomized set. With this option, all elements collectively will iterate through the classes. E.g. Two sets with one element each will both have class 1, with this option turned on, the second one will have class 2.</p></body></html>"))
        self.htmlClassesCollectiveIndexingCheckBox.setText(_translate("SRIterationConfig", "Collective Indexing"))
        self.fieldPaddingLabel.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>(fieldPadding) The field padding of the randomized sets after processing.</p></body></html>"))
        self.fieldPaddingLabel.setText(_translate("SRIterationConfig", "Field padding"))
        self.htmlClassesRandomStartIndexCheckBox.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>(classRsi) Normally, the choice of a class always start with class 1. With this option turned on, the first class will be chosen at random, before normally iterating through the classes again.</p></body></html>"))
        self.htmlClassesRandomStartIndexCheckBox.setText(_translate("SRIterationConfig", "Random Start Index"))
        self.cssColorsLineEdit.setText(_translate("SRIterationConfig", "black, white, grey"))
        self.cssColorsRandomStartIndexCheckBox.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>(colorRsi) Normally, the choice of a color always start with the first color in the list. With this option turned on, the first color will be chosen at random, before normally iterating through the colors again.</p></body></html>"))
        self.cssColorsRandomStartIndexCheckBox.setText(_translate("SRIterationConfig", "Random Start Index"))
        self.emptySetLineEdit.setText(_translate("SRIterationConfig", "---"))
        self.dsFieldSeparatorLineEdit.setText(_translate("SRIterationConfig", "%%%"))
        self.cssColorsDelimLabel.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>(colorDelim) A CSS color to color in the delimiters, and the Empty Set default value. If &quot;colors&quot; is empty, this will also color in the elements.</p></body></html>"))
        self.cssColorsDelimLabel.setText(_translate("SRIterationConfig", "Delimiter color"))
        self.cssColorsDelimLineEdit.setText(_translate("SRIterationConfig", "red"))
        self.htmlClassesDelimLineEdit.setText(_translate("SRIterationConfig", "classx"))
        self.generalOptions.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>The input syntax of the iteration. This will be used to detect sets in the card content.</p></body></html>"))
        self.generalOptions.setTitle(_translate("SRIterationConfig", "General"))
        self.enableIterationCheckBox.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>Advanced feature. Check this if you want to treat the content of the &quot;Open Delimiter&quot;, &quot;Close Delimiter&quot;, and &quot;Field separator&quot; as regular expressions.</p></body></html>"))
        self.enableIterationCheckBox.setText(_translate("SRIterationConfig", "Enable this iteration"))
        self.descriptionTextEdit.setPlaceholderText(_translate("SRIterationConfig", "Description"))
        self.yanksDefaultStyle.setTitle(_translate("SRIterationConfig", "Default Style: Yanks"))
        self.strokeLabel.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>(stroke) The CSS color of the stroke used to render yanks.</p></body></html>"))
        self.strokeLabel.setText(_translate("SRIterationConfig", "Stroke"))
        self.strokeWidthLabel.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>(strokeWidth) The width of the stroke when rendering yanks.</p></body></html>"))
        self.strokeWidthLabel.setText(_translate("SRIterationConfig", "Stroke Width"))
        self.fillLineEdit.setText(_translate("SRIterationConfig", "pink"))
        self.fillOpacityLabel.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>(fillOpacity) The opacity of the fill color for yanks.</p></body></html>"))
        self.fillOpacityLabel.setText(_translate("SRIterationConfig", "Fill Opacity"))
        self.fillLabel.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>(fill) The CSS color used to fill rendered yanks.</p></body></html>"))
        self.fillLabel.setText(_translate("SRIterationConfig", "Fill"))
        self.strokeLineEdit.setText(_translate("SRIterationConfig", "red"))
        self.strokeOpacityLabel.setToolTip(_translate("SRIterationConfig", "<html><head/><body><p>(strokeOpacity) The opacity of the stroke color for yanks.</p></body></html>"))
        self.strokeOpacityLabel.setText(_translate("SRIterationConfig", "Stroke Opacity"))
        self.strokeWidthSpinBox.setSuffix(_translate("SRIterationConfig", "px"))
        self.fillOpacitySpinBox.setSuffix(_translate("SRIterationConfig", "%"))
        self.strokeOpacitySpinBox.setSuffix(_translate("SRIterationConfig", "%"))
